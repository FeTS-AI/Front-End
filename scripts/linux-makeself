#!/bin/bash

# Linux makeself installer
# NOTE: This is NOT a script intended to be run as a part of the linux build or configuration process!
# It is meant to be bundled within makeself to install the binaries to the correct directories.

install_captk () {
  target_dir=$1
  echo "Installing to: ${target_dir}"
  # Prep stage

  # Check for file
  if [ -f ${target_dir}/FeTS ]
  then
    echo "Fatal: ./FeTS exists and is a file, not a directory"
    echo "To install, please ensure this file is renamed or moved"
    exit 1
  fi

  # Check for directory
  if [ -d ${target_dir}/FeTS ]
  then
    echo "${target_dir}/FeTS exists. Proceeding..."
  else
    echo "Creating ${target_dir}/FeTS/..."
    mkdir ${target_dir}/FeTS/
  fi

  # Version number. 'version' file should be provided by captk-pkg
  ver=`cat version`

  # Check version dir/file
  if [ -f ${target_dir}/FeTS/${ver} ]
  then
    echo "Fatal: ${target_dir}/FeTS/${ver} exists and is a file, not a directory"
    echo "To install, please ensure this file is renamed or moved"
    exit 1
  fi

  # Check for directory
  if [ -d ${target_dir}/FeTS/${ver} ]
  then
    echo "${target_dir}/FeTS/${ver} exists. Proceeding..."
  else
    echo "Creating ${target_dir}/FeTS/${ver}/..."
    mkdir ${target_dir}/FeTS/${ver}/
  fi


  # Check disk space
  echo "Checking disk space..."

  # Total free disk space is gotten with df . and we want the "availible" column. 
  # This is in kb so we need to convert to b as well
  # The middle part gets df, gets the last line of output, and gets the 4th column
  # the rest of it gets the result of that in bytes
  freedisk=`echo "$(df . | tail -n -1 | awk '{print $3}') * 1024" | bc -l`

  # Used space is gotten by analyzing the FeTS.bin file with ls -l
  useddisk=`ls -l FeTS.bin | awk '{print $5}'`

  if [ ${useddisk} -gt ${freedisk} ]
  then
    echo "Not enough free space on disk for operation. Aborting installation."
    exit 1
  fi

  # Check for FUSE
  echo "Checking for FUSE..."

  fusefail=0

  # Redirect fusermount output          
  fusermount -V 2> /dev/null

  if [ $? -ne 0 ]
  then
    fusefail=1
    echo "Warning: FUSE is not installed. See https://github.com/CBICA/CaPTk/wiki/GNU-Linux-Installer-Troubleshooting#dlopen-error-loading-libfuseso2-fuse-not-installed for further information. The AppImage will continue installation as normal."
  fi

  # Move file but preserve pid
  mv ./FeTS.bin ${target_dir}/FeTS/${ver}/FeTS-${ver}.bin 2>/dev/null &
  pid=$!
    
  # The latest in bash spinner technology from npm
  spin='-\|/'

  # Show a spinner until the file is done moving
  i=0
  while kill -0 $pid 2>/dev/null
  do
    i=$(( (i+1) %4 ))
    printf "\rInstalling... ${spin:$i:1}"
    sleep .1
  done
  printf "\n"

  # Last case
  chmod +x ${target_dir}/FeTS/${ver}/FeTS-${ver}.bin
  if [ $? -ne 0 ]; then
    echo "WARNING: It appears as if something is wrong with your installation. Please make sure there is enough room on your disk, and that FeTS-${ver}.bin is present under ./FeTS"
    exit 1
  fi

  # CWL
  echo "Installing CWL"
  mv ./*.cwl ${target_dir}/FeTS/${ver}/ 2>/dev/null

  # Creating a symbolic link
  echo "Creating symbolic link 'fets'"
  cd ${target_dir}/FeTS/${ver}/
  ln -s ./FeTS-${ver}.bin fets

  # Display any warnings at the end
  if [ ${fusefail} -eq 1 ]
  then
    echo "WARNING: You may have issues running the AppImage since FUSE was not detected on your filesystem; please extract the installation files using the \"${target_dir}/FeTS/${ver}/fets --appimage-extract\" option"
  fi

  echo "Done with AppImage extraction."
  echo "Extracting binaries..."
  cd ${target_dir}
  ./FeTS/${ver}/fets --appimage-extract
  ## openfl installation
  cd ${target_dir}/squashfs-root/usr/bin/OpenFederatedLearning
  doc_setup=https://fets-ai.github.io/Front-End/setup#set-up-the-environment
  nnunet_link=https://upenn.box.com/shared/static/f7zt19d08c545qt3tcaeg7b37z6qafum.zip
  max=8
  ver=`python3 -c 'import sys; print(sys.version_info.minor)'`
  if [ "$ver" -gt "$max" ]; then
    echo "Python version >3.8 detected, please change default version to either 3.6.5, 3.7 or 3.8"
    exit 1
  fi

  echo "Setting up the Python environment for OpenFederatedLearning..."
  if make install_openfl ; then
    ./venv/bin/pip install torch==1.7.1+cu92 torchvision==0.8.2+cu92 torchaudio==0.7.2 -f https://download.pytorch.org/whl/torch_stable.html
    make install_fets
    echo "Installing BrainMaGe..."
    ./venv/bin/pip install ../BrainMaGe

    cd ../LabelFusion
    echo "Setting up the Python environment for LabelFusion (this needs SimpleITK==2.0.2, but GaNDLF needs 1.2.4)..."
    python3 -m venv venv
    venv/bin/pip3 install -e .

    echo "Downloading weights for nnUNet..."
    cd ${target_dir}/squashfs-root/usr/data/fets
    wget ${nnunet_link} -O nnunet.zip
    unzip nnunet.zip
  fi
  ## openfl installation
  echo "fets_root_dir :: \"${target_dir}/squashfs-root/usr\""
  echo "[OPTIONAL] Run the graphical front-end using the command \"${target_dir}/squashfs-root/usr/bin/FeTS\" on your console."
  rm -rf ./FeTS
  rm -rf linux-makeself
}

# Print license with a reader
cat ./LICENSE | more

# echo "${PWD}"
# echo "${USER_PWD}"
# printenv 

# if --target flag is provided when installer extracted
# then PWD is not a tmp directory but is --target dir
# then point target_dir there
# else point target_dir to USER_PWD, which is current location of installer

target_dir=""

if [[ ${PWD} == *"tmp"* ]]; then
  target_dir=${USER_PWD}
  # echo "Userpwd"
else
  target_dir=${PWD}
  # echo "pwd"
fi

for i in {1..3}
do
  read -p "I accept the terms of the licenses above [Y/N] " choice
  case "$choice" in 
    [yY][eE][sS]|[yY]) install_captk ${target_dir}; break  ;;
    [nN][oO]|[nN]) echo "Goodbye" ; exit 0 ;;
    * ) echo "Invalid";;
  esac
done